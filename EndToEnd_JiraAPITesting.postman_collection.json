{
	"info": {
		"_postman_id": "d4574237-dd18-43ec-b8b5-e59902a5c911",
		"name": "End to End - Jira API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43601722",
		"_collection_link": "https://www.postman.com/koustavbasak/workspace/jira-api-testing/collection/43601722-d4574237-dd18-43ec-b8b5-e59902a5c911?action=share&source=collection_link&creator=43601722"
	},
	"item": [
		{
			"name": "Create a issue to the project",
			"item": [
				{
					"name": "Get all project - paginated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData.values)\r",
									"let projectInfo = jsonData.values\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//store the project id in the collection valriable\r",
									"let projectNames = projectInfo.map((value)=>value.name)\r",
									"console.log(projectNames)\r",
									"\r",
									"console.log(projectNames.indexOf(\"Demo2\"))\r",
									"\r",
									"console.log(projectInfo[projectNames.indexOf(\"Demo2\")].id)\r",
									"pm.collectionVariables.set(\"projectID\", projectInfo[projectNames.indexOf(\"Demo2\")].id);\r",
									"\r",
									"\r",
									"//store the project key in the collection variable\r",
									"console.log(projectInfo[projectNames.indexOf(\"Demo2\")].key)\r",
									"pm.collectionVariables.set(\"projectKey\", projectInfo[projectNames.indexOf(\"Demo2\")].key);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{hostname}}/rest/api/3/project/search",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"rest",
								"api",
								"3",
								"project",
								"search"
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://your-domain.atlassian.net/rest/api/3/project/search' \\\r\n  --user 'email@example.com:<api_token>' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Find users assignable to projects ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(jsonData[1].accountId)\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"reporterId\", jsonData[1].accountId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{hostname}}/rest/api/3/user/assignable/multiProjectSearch?projectKeys={{projectKey}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"rest",
								"api",
								"3",
								"user",
								"assignable",
								"multiProjectSearch"
							],
							"query": [
								{
									"key": "projectKeys",
									"value": "{{projectKey}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://your-domain.atlassian.net/rest/api/3/user/assignable/multiProjectSearch?query=query&projectKeys={projectKeys}' \\\r\n  --user 'email@example.com:<api_token>' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Get issue type for project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let issueNames = jsonData.map((value)=>value.name)\r",
									"console.log(issueNames)\r",
									"\r",
									"console.log(jsonData[issueNames.indexOf(\"Bug\")].id)\r",
									"\r",
									"pm.collectionVariables.set(\"issueId\", jsonData[issueNames.indexOf(pm.iterationData.get(\"Issue Name\"))].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{hostname}}/rest/api/3/issuetype/project?projectId={{projectID}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"rest",
								"api",
								"3",
								"issuetype",
								"project"
							],
							"query": [
								{
									"key": "projectId",
									"value": "{{projectID}}"
								}
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/project?projectId={projectId}' \\\r\n  --user 'email@example.com:<api_token>' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"issueIdAterCreationIssue\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"issueSummary\", pm.iterationData.get(\"Issue Titel\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fields\": {\r\n    \r\n    \"issuetype\": {\r\n      \"id\": \"{{issueId}}\"\r\n    },\r\n    \r\n    \"project\": {\r\n      \"id\": \"{{projectID}}\"\r\n    },\r\n    \"reporter\": {\r\n      \"id\": \"{{reporterId}}\"\r\n    },\r\n    \r\n    \"summary\": \"{{issueSummary}}\"\r\n    \r\n  },\r\n  \"update\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/rest/api/3/issue",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"rest",
								"api",
								"3",
								"issue"
							]
						},
						"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://your-domain.atlassian.net/rest/api/3/issue' \\\r\n  --user 'email@example.com:<api_token>' \\\r\n  --header 'Accept: application/json' \\\r\n  --header 'Content-Type: application/json' \\\r\n  --data '{\r\n  \"fields\": {\r\n    \"assignee\": {\r\n      \"id\": \"5b109f2e9729b51b54dc274d\"\r\n    },\r\n    \"components\": [\r\n      {\r\n        \"id\": \"10000\"\r\n      }\r\n    ],\r\n    \"customfield_10000\": \"09/Jun/19\",\r\n    \"customfield_20000\": \"06/Jul/19 3:25 PM\",\r\n    \"customfield_30000\": [\r\n      \"10000\",\r\n      \"10002\"\r\n    ],\r\n    \"customfield_40000\": {\r\n      \"content\": [\r\n        {\r\n          \"content\": [\r\n            {\r\n              \"text\": \"Occurs on all orders\",\r\n              \"type\": \"text\"\r\n            }\r\n          ],\r\n          \"type\": \"paragraph\"\r\n        }\r\n      ],\r\n      \"type\": \"doc\",\r\n      \"version\": 1\r\n    },\r\n    \"customfield_50000\": {\r\n      \"content\": [\r\n        {\r\n          \"content\": [\r\n            {\r\n              \"text\": \"Could impact day-to-day work.\",\r\n              \"type\": \"text\"\r\n            }\r\n          ],\r\n          \"type\": \"paragraph\"\r\n        }\r\n      ],\r\n      \"type\": \"doc\",\r\n      \"version\": 1\r\n    },\r\n    \"customfield_60000\": \"jira-software-users\",\r\n    \"customfield_70000\": [\r\n      \"jira-administrators\",\r\n      \"jira-software-users\"\r\n    ],\r\n    \"customfield_80000\": {\r\n      \"value\": \"red\"\r\n    },\r\n    \"description\": {\r\n      \"content\": [\r\n        {\r\n          \"content\": [\r\n            {\r\n              \"text\": \"Order entry fails when selecting supplier.\",\r\n              \"type\": \"text\"\r\n            }\r\n          ],\r\n          \"type\": \"paragraph\"\r\n        }\r\n      ],\r\n      \"type\": \"doc\",\r\n      \"version\": 1\r\n    },\r\n    \"duedate\": \"2019-05-11\",\r\n    \"environment\": {\r\n      \"content\": [\r\n        {\r\n          \"content\": [\r\n            {\r\n              \"text\": \"UAT\",\r\n              \"type\": \"text\"\r\n            }\r\n          ],\r\n          \"type\": \"paragraph\"\r\n        }\r\n      ],\r\n      \"type\": \"doc\",\r\n      \"version\": 1\r\n    },\r\n    \"fixVersions\": [\r\n      {\r\n        \"id\": \"10001\"\r\n      }\r\n    ],\r\n    \"issuetype\": {\r\n      \"id\": \"10000\"\r\n    },\r\n    \"labels\": [\r\n      \"bugfix\",\r\n      \"blitz_test\"\r\n    ],\r\n    \"parent\": {\r\n      \"key\": \"PROJ-123\"\r\n    },\r\n    \"priority\": {\r\n      \"id\": \"20000\"\r\n    },\r\n    \"project\": {\r\n      \"id\": \"10000\"\r\n    },\r\n    \"reporter\": {\r\n      \"id\": \"5b10a2844c20165700ede21g\"\r\n    },\r\n    \"security\": {\r\n      \"id\": \"10000\"\r\n    },\r\n    \"summary\": \"Main order flow broken\",\r\n    \"timetracking\": {\r\n      \"originalEstimate\": \"10\",\r\n      \"remainingEstimate\": \"5\"\r\n    },\r\n    \"versions\": [\r\n      {\r\n        \"id\": \"10000\"\r\n      }\r\n    ]\r\n  },\r\n  \"update\": {}\r\n}'"
					},
					"response": []
				},
				{
					"name": "Get issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"projectID\");\r",
									"pm.collectionVariables.unset(\"projectKey\");\r",
									"pm.collectionVariables.unset(\"reporterId\");\r",
									"pm.collectionVariables.unset(\"issueId\");\r",
									"pm.collectionVariables.unset(\"issueIdAterCreationIssue\");\r",
									"pm.collectionVariables.unset(\"issueSummary\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{hostname}}/rest/api/3/issue/{{issueIdAterCreationIssue}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"rest",
								"api",
								"3",
								"issue",
								"{{issueIdAterCreationIssue}}"
							]
						},
						"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://your-domain.atlassian.net/rest/api/3/issue/{issueIdOrKey}' \\\r\n  --user 'email@example.com:<api_token>' \\\r\n  --header 'Accept: application/json'"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{jiraToken}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}